name: Deploy to GitHub Pages

on:
  push:
    branches: [ master, main ]
  pull_request:
    branches: [ master, main ]
  workflow_dispatch:

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        
    - name: Setup Pages
      uses: actions/configure-pages@v4
      
    - name: Install dependencies
      run: |
        npm init -y
        npm install --save-dev html-minifier terser clean-css-cli
        
    - name: Optimize files
      run: |
        # Create optimized directory
        mkdir -p optimized
        
        # Copy all files to optimized directory
        cp -r *.html *.css *.js *.yaml *.txt optimized/ || true
        
        # Minify CSS files
        for file in optimized/*.css; do
          if [ -f "$file" ]; then
            npx cleancss -o "${file}" "${file}" || cp "${file}" "${file}.bak"
          fi
        done
        
        # Minify JS files
        for file in optimized/*.js; do
          if [ -f "$file" ]; then
            npx terser "${file}" -o "${file}" --compress --mangle || cp "${file}" "${file}.bak"
          fi
        done
        
        # Minify HTML files
        for file in optimized/*.html; do
          if [ -f "$file" ]; then
            npx html-minifier --collapse-whitespace --remove-comments --minify-css --minify-js "${file}" -o "${file}" || cp "${file}" "${file}.bak"
          fi
        done
        
    - name: Upload artifact
      uses: actions/upload-pages-artifact@v3
      with:
        path: './optimized'

  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4